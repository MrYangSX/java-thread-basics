线程概念
	进程与线程：
	　　进程：程序的一次动态执行过程，它需要经历从代码加载，代码执行到执行完毕的一个完整的过程，
			  这个过程也是进程本身从产生，发展到最终消亡的过程。
			  多进程操作系统能同时达运行多个进程（程序），由于 CPU 具备分时机制，
			  所以每个进程都能循环获得自己的CPU 时间片。由于 CPU 执行速度非常快，使得所            
			  有程序好像是在同时运行一样。
	　　线程：实现并发机制的一种有效手段。
	   		  进程和线程一样，都是实现并发的一个基本单位。
	   		  线程是比进程更小的执行单位，线程是进程的基础之上进行进一步的划分。
	   		  所谓多线程是指一个进程在执行过程中可以产生多个更小的程序单元，这些更小的单元称为线程，
	   		  这些线程可以同时存在，同时运行，一个进程可能包含多个同时执行的线程。
　　（并行：多个CPU同时执行多个任务，比如:多个人同时做不同的事；
　　　并发：一个CPU（采用时间片）同时执行多个任务，比如秒杀平台，多个人做同件事；）
线程安全：经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。
		  这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。
		  反过来，线程不安全就意味着线程的调度顺序会影响最终结果；
线程的相关API
	//获取当前线程的名字
	Thread.currentThread().getName()
	1.start():1.启动当前线程2.调用线程中的run方法
	2.run():通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中
	3.currentThread():静态方法，返回执行当前代码的线程
	4.getName():获取当前线程的名字
	5.setName():设置当前线程的名字
	6.yield():主动释放当前线程的执行权
	7.join():在线程中插入执行另一个线程，该线程被阻塞，直到插入执行的线程完全执行完毕以后，
			 该线程才继续执行下去
	8.stop():过时方法。当执行此方法时，强制结束当前线程。
	9.sleep（long millitime）：线程休眠一段时间
	10.isAlive（）：判断当前线程是否存活
线程的调度
	调度策略：
	    时间片：线程的调度采用时间片轮转的方式
	    抢占式：高优先级的线程抢占CPU
	    Java的调度方法：
	    1.对于同优先级的线程组成先进先出队列（先到先服务），使用时间片策略
	    2.对高优先级，使用优先调度的抢占式策略

线程的优先级
	等级：
	    MAX_PRIORITY:10
	    MIN_PRIORITY:1
	    NORM_PRIORITY:5
	
	方法：
	    getPriority():返回线程优先级
	    setPriority(int newPriority):改变线程的优先级
	
	注意！：高优先级的线程要抢占低优先级的线程的cpu的执行权。但是仅是从概率上来说的，
		    高优先级的线程更有可能被执行。并不意味着只有高优先级的线程执行完以后，
		    低优先级的线程才执行。